-- User Table RLS Policies
-- Enable RLS on users table
ALTER TABLE "users" ENABLE ROW LEVEL SECURITY;

-- Anyone can read public user profiles
CREATE POLICY "Users are viewable by everyone" ON "users"
  FOR SELECT USING (true);

-- Users can only insert their own profile
CREATE POLICY "Users can insert their own profile" ON "users"
  FOR INSERT WITH CHECK (id::uuid = auth.uid());

-- Users can update only their own profile
CREATE POLICY "Users can update their own profile" ON "users"
  FOR UPDATE USING (id::uuid = auth.uid());

-- Users can delete only their own profile
CREATE POLICY "Users can delete their own profile" ON "users"
  FOR DELETE USING (id::uuid = auth.uid());



-- Space Table RLS Policies 
-- Enable RLS on spaces table
ALTER TABLE "spaces" ENABLE ROW LEVEL SECURITY;

-- Anyone can view spaces
CREATE POLICY "Spaces are viewable by everyone" ON "spaces"
  FOR SELECT USING (true);

-- Only special users can create spaces
CREATE POLICY "Admin can create spaces" ON "spaces"
  FOR INSERT WITH CHECK (
    EXISTS (SELECT 1 FROM users WHERE id::uuid = auth.uid() AND special_user = true)
  );

-- Only space admins can update their spaces
CREATE POLICY "Space admins can update spaces" ON "spaces"
  FOR UPDATE USING (admin_id::uuid = auth.uid());

-- Only space admins can delete their spaces
CREATE POLICY "Space admins can delete spaces" ON "spaces"
  FOR DELETE USING (admin_id::uuid = auth.uid());



-- Game Table RLS Policies
-- Enable RLS on games table
ALTER TABLE "games" ENABLE ROW LEVEL SECURITY;

-- Anyone can view games
CREATE POLICY "Games are viewable by everyone" ON "games"
  FOR SELECT USING (true);

-- Only special users can insert games
CREATE POLICY "Admin can insert games" ON "games"
  FOR INSERT WITH CHECK (
    EXISTS (SELECT 1 FROM users WHERE id::uuid = auth.uid() AND special_user = true)
  );

-- Only special users can update games
CREATE POLICY "Admin can update games" ON "games"
  FOR UPDATE USING (
    EXISTS (SELECT 1 FROM users WHERE id::uuid = auth.uid() AND special_user = true)
  );

-- Only special users can delete games
CREATE POLICY "Admin can delete games" ON "games"
  FOR DELETE USING (
    EXISTS (SELECT 1 FROM users WHERE id::uuid = auth.uid() AND special_user = true)
  );



-- Scrim Table RLS Policies 
-- Enable RLS on scrims table
ALTER TABLE "scrims" ENABLE ROW LEVEL SECURITY;

-- Anyone can view scrims
CREATE POLICY "Scrims are viewable by everyone" ON "scrims"
  FOR SELECT USING (true);

-- Only special users can create scrims
CREATE POLICY "Admin can create scrims" ON "scrims"
  FOR INSERT WITH CHECK (
    EXISTS (SELECT 1 FROM users WHERE id::uuid = auth.uid() AND special_user = true)
  );

-- Only scrim admins and space admins can update scrims
CREATE POLICY "Admins can update scrims" ON "scrims"
  FOR UPDATE USING (
    admin_id::uuid = auth.uid() OR 
    EXISTS (
      SELECT 1 FROM spaces 
      WHERE spaces.id = scrims.space_id AND spaces.admin_id::uuid = auth.uid()
    )
  );

-- Only scrim admins and space admins can delete scrims
CREATE POLICY "Admins can delete scrims" ON "scrims"
  FOR DELETE USING (
    admin_id::uuid = auth.uid() OR 
    EXISTS (
      SELECT 1 FROM spaces 
      WHERE spaces.id = scrims.space_id AND spaces.admin_id::uuid = auth.uid()
    )
  );



-- Scrim Match Table RLS Policies 
-- Enable RLS on scrim_matches table
ALTER TABLE "scrim_matches" ENABLE ROW LEVEL SECURITY;

-- Only registered team members and admins can view match details
CREATE POLICY "Matches are viewable by registered team members" ON "scrim_matches"
  FOR SELECT USING (
    -- Allow users who are part of teams registered for this scrim
    EXISTS (
      SELECT 1 FROM team_members tm
      JOIN scrim_registrations sr ON sr.team_id = tm.team_id
      WHERE tm.user_id::uuid = auth.uid()
      AND sr.scrim_id = scrim_matches.scrim_id
      AND sr.canceled = false
    )
    OR 
    -- Allow scrim admins to view matches
    EXISTS (
      SELECT 1 FROM scrims s
      WHERE s.id = scrim_matches.scrim_id
      AND s.admin_id::uuid = auth.uid()
    )
    OR
    -- Allow space admins to view matches
    EXISTS (
      SELECT 1 FROM scrims s
      JOIN spaces sp ON sp.id = s.space_id
      WHERE s.id = scrim_matches.scrim_id
      AND sp.admin_id::uuid = auth.uid()
    )
  );

-- Only scrim admins can insert matches
CREATE POLICY "Scrim admins can insert matches" ON "scrim_matches"
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM scrims 
      WHERE scrims.id = scrim_matches.scrim_id AND scrims.admin_id::uuid = auth.uid()
    )
  );

-- Only scrim admins can update matches
CREATE POLICY "Scrim admins can update matches" ON "scrim_matches"
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM scrims 
      WHERE scrims.id = scrim_matches.scrim_id AND scrims.admin_id::uuid = auth.uid()
    )
  );

-- Only scrim admins can delete matches
CREATE POLICY "Scrim admins can delete matches" ON "scrim_matches"
  FOR DELETE USING (
    EXISTS (
      SELECT 1 FROM scrims 
      WHERE scrims.id = scrim_matches.scrim_id AND scrims.admin_id::uuid = auth.uid()
    )
  );



-- Team Table RLS Policies 
-- Enable RLS on teams table
ALTER TABLE "teams" ENABLE ROW LEVEL SECURITY;

-- Anyone can view teams
CREATE POLICY "Teams are viewable by everyone" ON "teams"
  FOR SELECT USING (true);

-- Authenticated users can create teams
CREATE POLICY "Users can create teams" ON "teams"
  FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);

-- Team owners can update their teams
CREATE POLICY "Team owners can update teams" ON "teams"
  FOR UPDATE USING (owner_id::uuid = auth.uid());

-- Team owners can delete their teams
CREATE POLICY "Team owners can delete teams" ON "teams"
  FOR DELETE USING (owner_id::uuid = auth.uid());



-- Team Member Table RLS Policies
-- Enable RLS on team_members table
ALTER TABLE "team_members" ENABLE ROW LEVEL SECURITY;

-- Anyone can view team members
CREATE POLICY "Team members are viewable by everyone" ON "team_members"
  FOR SELECT USING (true);

-- Team admins can add members
CREATE POLICY "Team admins can add members" ON "team_members"
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM teams t 
      WHERE t.id = team_members.team_id AND (
        t.owner_id::uuid = auth.uid() OR
        EXISTS (
          SELECT 1 FROM team_members tm 
          WHERE tm.team_id = team_members.team_id AND tm.user_id::uuid = auth.uid() AND tm.is_admin = true
        )
      )
    )
  );

-- Team admins can update members
CREATE POLICY "Team admins can update members" ON "team_members"
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM teams t 
      WHERE t.id = team_members.team_id AND (
        t.owner_id::uuid = auth.uid() OR
        EXISTS (
          SELECT 1 FROM team_members tm 
          WHERE tm.team_id = team_members.team_id AND tm.user_id::uuid = auth.uid() AND tm.is_admin = true
        )
      )
    )
  );

-- Team admins or the member themselves can delete members
CREATE POLICY "Team admins or self can delete members" ON "team_members"
  FOR DELETE USING (
    user_id::uuid = auth.uid() OR
    EXISTS (
      SELECT 1 FROM teams t 
      WHERE t.id = team_members.team_id AND (
        t.owner_id::uuid = auth.uid() OR
        EXISTS (
          SELECT 1 FROM team_members tm 
          WHERE tm.team_id = team_members.team_id AND tm.user_id::uuid = auth.uid() AND tm.is_admin = true
        )
      )
    )
  );



-- Team Join Requests Table RLS Policies 
-- Enable RLS on team_join_requests table
ALTER TABLE "team_join_requests" ENABLE ROW LEVEL SECURITY;

-- Requests are viewable by team admins and the request sender
CREATE POLICY "Requests viewable by relevant users" ON "team_join_requests"
  FOR SELECT USING (
    sender_id::uuid = auth.uid() OR
    EXISTS (
      SELECT 1 FROM team_members tm 
      WHERE tm.team_id = team_join_requests.team_id AND tm.user_id::uuid = auth.uid() AND tm.is_admin = true
    ) OR
    EXISTS (
      SELECT 1 FROM teams t 
      WHERE t.id = team_join_requests.team_id AND t.owner_id::uuid = auth.uid()
    )
  );

-- Authenticated users can create join requests
CREATE POLICY "Users can create join requests" ON "team_join_requests"
  FOR INSERT WITH CHECK (
    auth.uid()::text = sender_id::text
  );

-- Team admins can update requests (accept/reject)
CREATE POLICY "Team admins can update requests" ON "team_join_requests"
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM team_members tm 
      WHERE tm.team_id = team_join_requests.team_id AND tm.user_id::uuid = auth.uid() AND tm.is_admin = true
    ) OR
    EXISTS (
      SELECT 1 FROM teams t 
      WHERE t.id = team_join_requests.team_id AND t.owner_id::uuid = auth.uid()
    )
  );

-- Sender can delete (cancel) their own request
CREATE POLICY "Senders can delete their requests" ON "team_join_requests"
  FOR DELETE USING (
    sender_id::uuid = auth.uid()
  );



-- Scrim Registrations Table RLS Policies
-- Enable RLS on scrim_registrations table
ALTER TABLE "scrim_registrations" ENABLE ROW LEVEL SECURITY;

-- Anyone can view registrations
CREATE POLICY "Registrations are viewable by everyone" ON "scrim_registrations"
  FOR SELECT USING (true);

-- Team admins can register teams
CREATE POLICY "Team admins can register teams" ON "scrim_registrations"
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM team_members tm 
      WHERE tm.team_id = scrim_registrations.team_id AND tm.user_id::uuid = auth.uid() AND tm.is_admin = true
    ) OR
    EXISTS (
      SELECT 1 FROM teams t 
      WHERE t.id = scrim_registrations.team_id AND t.owner_id::uuid = auth.uid()
    )
  );

-- Team or scrim admins can update registrations
CREATE POLICY "Admins can update registrations" ON "scrim_registrations"
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM team_members tm 
      WHERE tm.team_id = scrim_registrations.team_id AND tm.user_id::uuid = auth.uid() AND tm.is_admin = true
    ) OR
    EXISTS (
      SELECT 1 FROM teams t 
      WHERE t.id = scrim_registrations.team_id AND t.owner_id::uuid = auth.uid()
    ) OR
    EXISTS (
      SELECT 1 FROM scrims s 
      WHERE s.id = scrim_registrations.scrim_id AND s.admin_id::uuid = auth.uid()
    )
  );

-- Team or scrim admins can delete registrations
CREATE POLICY "Admins can delete registrations" ON "scrim_registrations"
  FOR DELETE USING (
    EXISTS (
      SELECT 1 FROM team_members tm 
      WHERE tm.team_id = scrim_registrations.team_id AND tm.user_id::uuid = auth.uid() AND tm.is_admin = true
    ) OR
    EXISTS (
      SELECT 1 FROM teams t 
      WHERE t.id = scrim_registrations.team_id AND t.owner_id::uuid = auth.uid()
    ) OR
    EXISTS (
      SELECT 1 FROM scrims s 
      WHERE s.id = scrim_registrations.scrim_id AND s.admin_id::uuid = auth.uid()
    )
  );



-- Announcements Table RLS Policies 
-- Enable RLS on announcements table
ALTER TABLE "announcements" ENABLE ROW LEVEL SECURITY;

-- Anyone can view announcements
CREATE POLICY "Announcements are viewable by everyone" ON "announcements"
  FOR SELECT USING (true);

-- Only context admins can create announcements
CREATE POLICY "Admins can create announcements" ON "announcements"
  FOR INSERT WITH CHECK (
    CASE 
      WHEN context_type = 'scrims' THEN 
        EXISTS (SELECT 1 FROM scrims WHERE id = context_id AND admin_id::uuid = auth.uid())
      WHEN context_type = 'spaces' THEN 
        EXISTS (SELECT 1 FROM spaces WHERE id = context_id AND admin_id::uuid = auth.uid())
      WHEN context_type = 'teams' THEN 
        EXISTS (SELECT 1 FROM teams WHERE id = context_id AND owner_id::uuid = auth.uid()) OR
        EXISTS (SELECT 1 FROM team_members WHERE team_id = context_id AND user_id::uuid = auth.uid() AND is_admin = true)
      ELSE false
    END
  );

-- Only context admins can update announcements
CREATE POLICY "Admins can update announcements" ON "announcements"
  FOR UPDATE USING (
    CASE 
      WHEN context_type = 'scrims' THEN 
        EXISTS (SELECT 1 FROM scrims WHERE id = context_id AND admin_id::uuid = auth.uid())
      WHEN context_type = 'spaces' THEN 
        EXISTS (SELECT 1 FROM spaces WHERE id = context_id AND admin_id::uuid = auth.uid())
      WHEN context_type = 'teams' THEN 
        EXISTS (SELECT 1 FROM teams WHERE id = context_id AND owner_id::uuid = auth.uid()) OR
        EXISTS (SELECT 1 FROM team_members WHERE team_id = context_id AND user_id::uuid = auth.uid() AND is_admin = true)
      ELSE false
    END
  );

-- Only context admins can delete announcements
CREATE POLICY "Admins can delete announcements" ON "announcements"
  FOR DELETE USING (
    CASE 
      WHEN context_type = 'scrims' THEN 
        EXISTS (SELECT 1 FROM scrims WHERE id = context_id AND admin_id::uuid = auth.uid())
      WHEN context_type = 'spaces' THEN 
        EXISTS (SELECT 1 FROM spaces WHERE id = context_id AND admin_id::uuid = auth.uid())
      WHEN context_type = 'teams' THEN 
        EXISTS (SELECT 1 FROM teams WHERE id = context_id AND owner_id::uuid = auth.uid()) OR
        EXISTS (SELECT 1 FROM team_members WHERE team_id = context_id AND user_id::uuid = auth.uid() AND is_admin = true)
      ELSE false
    END
  );