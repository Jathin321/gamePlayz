generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_DATABASE_URL")
  directUrl = env("SUPABASE_DIRECT_URL")
}

model User {
  id               String            @id @unique
  slug             String?           @unique
  fullname         String?           @map("fullname")
  username         String            @unique
  email            String            @unique
  phone            String?
  dateOfBirth      DateTime?         @map("date_of_birth")
  profilePic       String?           @map("profile_pic")
  bio              String?
  location         String?
  motherTongue     String?           @map("mother_tongue")
  mostActive       MostActive?       @map("most_active")
  gender           Gender?
  special_user     Boolean           @default(false)
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  Spaces           Space[]
  Scrim            Scrim[]
  Teams            Team[]
  teamMembers      TeamMember[]
  sentRequests     TeamJoinRequest[] @relation("Sender")
  receivedRequests TeamJoinRequest[] @relation("Receiver")
  sentMessages     LiveChatMessage[] @relation("MessageSender")
  receivedReplies  LiveChatMessage[] @relation("MessageRepliedTo")
  announcements    Announcement[]

  @@index([slug])
  @@index([username])
  @@index([email])
  @@map("user_profiles")
}

enum MostActive {
  morning
  evening
  night
}

enum Gender {
  Male
  Female
  Other
}

model Space {
  id         String   @id @default(cuid()) @map("id")
  slug       String   @unique
  spaceName  String   @map("space_name")
  desc       String   @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  profilePic String?  @map("profile_pic")
  banner     String?
  admin      User     @relation(fields: [adminId], references: [id])
  adminId    String   @map("admin_id")
  Scrim      Scrim[]

  @@map("spaces")
}

model Game {
  id         String  @id @default(cuid())
  slug       String  @unique
  name       String
  type       String?
  profilePic String? @map("profile_pic")
  banner     String?
  Scrim      Scrim[]

  @@map("games")
}

enum ScrimStatus {
  upcoming
  registering
  matchmaking
  completed
  cancled
}

model Scrim {
  id           String      @id @default(cuid())
  slug         String      @unique
  name         String
  game         Game        @relation(fields: [gameId], references: [id])
  space        Space       @relation(fields: [spaceId], references: [id])
  admin        User        @relation(fields: [adminId], references: [id])
  banner       String?
  startDate    DateTime    @map("start_date")
  endDate      DateTime    @map("end_date")
  description  String      @db.Text
  rules        String[]
  teamSize     Int         @map("team_size")
  prizePool    Int         @map("prize_pool")
  entryFee     Int         @map("entry_fee")
  slots        Int
  status       ScrimStatus
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  matchesCount Int         @default(1) @map("matches_count")

  gameId  String @map("game_id")
  spaceId String @map("space_id")
  adminId String @map("admin_id")

  matches       ScrimMatch[]
  registrations ScrimRegistration[]

  @@map("scrims")
}

model ScrimMatch {
  id          String    @id @default(cuid())
  scrim       Scrim     @relation(fields: [scrimId], references: [id])
  scrimId     String    @map("scrim_id")
  matchNumber Int       @default(1) @map("match_number")
  startDate   DateTime? @map("start_date")
  roomId      String?   @map("room_id")
  password    String?
  results     Json?     @db.Json

  @@map("scrim_matches")
}

model Team {
  id                  String              @id @default(cuid())
  slug                String              @unique
  name                String
  owner               User                @relation(fields: [ownerId], references: [id])
  ownerId             String              @map("owner_id")
  desc                String              @db.Text
  profilePic          String?             @map("profile_pic")
  banner              String?
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  members             TeamMember[]
  joinRequests        TeamJoinRequest[]
  scrim_registrations ScrimRegistration[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid()) @map("id")
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   String   @map("team_id")
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @map("user_id")
  role     Role     @default(player)
  isAdmin  Boolean  @default(false) @map("is_admin")
  joinedAt DateTime @default(now()) @map("joined_at")

  @@map("team_members")
}

enum Role {
  player
  coach
  substitute
}

model TeamJoinRequest {
  id         String     @id @default(cuid()) @map("id")
  sender     User       @relation("Sender", fields: [senderId], references: [id])
  senderId   String     @map("sender_id")
  receiver   User?      @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String?    @map("receiver_id")
  team       Team       @relation(fields: [teamId], references: [id])
  teamId     String     @map("team_id")
  status     JoinStatus @default(pending)
  createdAt  DateTime   @default(now()) @map("created_at")

  @@map("team_join_requests")
}

enum JoinStatus {
  pending
  accepted
  declined
}

model ScrimRegistration {
  id           String   @id @default(cuid()) @map("id")
  team         Team     @relation(fields: [teamId], references: [id])
  teamId       String   @map("team_id")
  scrim        Scrim    @relation(fields: [scrimId], references: [id])
  scrimId      String   @map("scrim_id")
  registeredAt DateTime @default(now()) @map("registered_at")
  canceled     Boolean  @default(false) @map("canceled")

  @@map("scrim_registrations")
}

enum ChatContextType {
  spaces
  tournaments
  scrims
  teams
}

model LiveChatMessage {
  id          String          @id @default(cuid())
  content     String          @db.Text
  sender      User            @relation("MessageSender", fields: [senderId], references: [id])
  senderId    String          @map("sender_id")
  repliedTo   User?           @relation("MessageRepliedTo", fields: [repliedToId], references: [id])
  repliedToId String?         @map("replied_to_id")
  contextType ChatContextType @map("context_type")
  contextId   String          @map("context_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  @@index([senderId])
  @@index([contextType, contextId])
  @@map("live_chat_messages")
}

model Announcement {
  id          String          @id @default(cuid())
  title       String
  content     String          @db.Text
  important   Boolean         @default(false)
  sender      User            @relation(fields: [senderId], references: [id])
  senderId    String          @map("sender_id")
  contextType ChatContextType @map("context_type")
  contextId   String          @map("context_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  @@index([senderId])
  @@index([contextType, contextId])
  @@map("announcements")
}